{"ast":null,"code":"// src/app/store/league/league.selectors.ts\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { CHAMPIONSHIP_CALCULATION_START_WEEK } from '../../models/league.constants';\nexport const selectLeagueState = createFeatureSelector('league');\n// Basic selectors\nexport const selectTeams = createSelector(selectLeagueState, state => state.teams);\nexport const selectMatches = createSelector(selectLeagueState, state => state.matches);\nexport const selectCurrentWeek = createSelector(selectLeagueState, state => state.currentWeek);\nexport const selectStandings = createSelector(selectLeagueState, state => state.standings);\nexport const selectWeeklyMatches = createSelector(selectLeagueState, state => state.weeklyMatches);\nexport const selectIsSeasonFinished = createSelector(selectLeagueState, state => state.isSeasonFinished);\nexport const selectChampion = createSelector(selectLeagueState, state => state.champion);\nexport const selectLoading = createSelector(selectLeagueState, state => state.loading);\nexport const selectError = createSelector(selectLeagueState, state => state.error);\nexport const selectTotalWeeks = createSelector(selectLeagueState, state => state.totalWeeks);\n// Complex selectors\nexport const selectCurrentWeekMatches = createSelector(selectWeeklyMatches, selectCurrentWeek, (weeklyMatches, currentWeek) => weeklyMatches.find(wm => wm.week === currentWeek)?.matches || []);\nexport const selectPlayedMatches = createSelector(selectMatches, matches => matches.filter(match => match.isPlayed));\nexport const selectUpcomingMatches = createSelector(selectMatches, matches => matches.filter(match => !match.isPlayed));\nexport const selectCanPlayNextWeek = createSelector(selectCurrentWeek, selectTotalWeeks, selectIsSeasonFinished, (currentWeek, totalWeeks, isFinished) => currentWeek <= totalWeeks && !isFinished);\nexport const selectCanShowChampionshipChances = createSelector(selectCurrentWeek, currentWeek => currentWeek >= CHAMPIONSHIP_CALCULATION_START_WEEK);\nexport const selectTeamsWithoutChampionshipChance = createSelector(selectStandings, selectCanShowChampionshipChances, (standings, canShow) => {\n  if (!canShow) return [];\n  return standings.filter(teamStat => !teamStat.isChampionshipPossible).map(teamStat => teamStat.team.id);\n});\n// Statistics selectors\nexport const selectTotalGoals = createSelector(selectPlayedMatches, matches => matches.reduce((total, match) => total + (match.homeScore || 0) + (match.awayScore || 0), 0));\nexport const selectAverageGoalsPerMatch = createSelector(selectPlayedMatches, selectTotalGoals, (matches, totalGoals) => matches.length > 0 ? totalGoals / matches.length : 0);\nexport const selectLeagueProgress = createSelector(selectCurrentWeek, selectTotalWeeks, (currentWeek, totalWeeks) => ({\n  current: currentWeek - 1,\n  total: totalWeeks,\n  percentage: (currentWeek - 1) / totalWeeks * 100\n}));","map":{"version":3,"names":["createFeatureSelector","createSelector","CHAMPIONSHIP_CALCULATION_START_WEEK","selectLeagueState","selectTeams","state","teams","selectMatches","matches","selectCurrentWeek","currentWeek","selectStandings","standings","selectWeeklyMatches","weeklyMatches","selectIsSeasonFinished","isSeasonFinished","selectChampion","champion","selectLoading","loading","selectError","error","selectTotalWeeks","totalWeeks","selectCurrentWeekMatches","find","wm","week","selectPlayedMatches","filter","match","isPlayed","selectUpcomingMatches","selectCanPlayNextWeek","isFinished","selectCanShowChampionshipChances","selectTeamsWithoutChampionshipChance","canShow","teamStat","isChampionshipPossible","map","team","id","selectTotalGoals","reduce","total","homeScore","awayScore","selectAverageGoalsPerMatch","totalGoals","length","selectLeagueProgress","current","percentage"],"sources":["C:\\Users\\sirac\\OneDrive\\Masaüstü\\futbol-ligi-simulasyonu\\src\\app\\store\\league\\league.selectors.ts"],"sourcesContent":["// src/app/store/league/league.selectors.ts\r\n\r\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { LeagueState } from '../../models/league-state.model';\r\nimport { CHAMPIONSHIP_CALCULATION_START_WEEK } from '../../models/league.constants';\r\n\r\nexport const selectLeagueState = createFeatureSelector<LeagueState>('league');\r\n\r\n// Basic selectors\r\nexport const selectTeams = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.teams\r\n);\r\n\r\nexport const selectMatches = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.matches\r\n);\r\n\r\nexport const selectCurrentWeek = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.currentWeek\r\n);\r\n\r\nexport const selectStandings = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.standings\r\n);\r\n\r\nexport const selectWeeklyMatches = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.weeklyMatches\r\n);\r\n\r\nexport const selectIsSeasonFinished = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.isSeasonFinished\r\n);\r\n\r\nexport const selectChampion = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.champion\r\n);\r\n\r\nexport const selectLoading = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.loading\r\n);\r\n\r\nexport const selectError = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.error\r\n);\r\n\r\nexport const selectTotalWeeks = createSelector(\r\n  selectLeagueState,\r\n  (state: LeagueState) => state.totalWeeks\r\n);\r\n\r\n// Complex selectors\r\nexport const selectCurrentWeekMatches = createSelector(\r\n  selectWeeklyMatches,\r\n  selectCurrentWeek,\r\n  (weeklyMatches, currentWeek) => \r\n    weeklyMatches.find(wm => wm.week === currentWeek)?.matches || []\r\n);\r\n\r\nexport const selectPlayedMatches = createSelector(\r\n  selectMatches,\r\n  (matches) => matches.filter(match => match.isPlayed)\r\n);\r\n\r\nexport const selectUpcomingMatches = createSelector(\r\n  selectMatches,\r\n  (matches) => matches.filter(match => !match.isPlayed)\r\n);\r\n\r\nexport const selectCanPlayNextWeek = createSelector(\r\n  selectCurrentWeek,\r\n  selectTotalWeeks,\r\n  selectIsSeasonFinished,\r\n  (currentWeek, totalWeeks, isFinished) => \r\n    currentWeek <= totalWeeks && !isFinished\r\n);\r\n\r\nexport const selectCanShowChampionshipChances = createSelector(\r\n  selectCurrentWeek,\r\n  (currentWeek) => currentWeek >= CHAMPIONSHIP_CALCULATION_START_WEEK\r\n);\r\n\r\nexport const selectTeamsWithoutChampionshipChance = createSelector(\r\n  selectStandings,\r\n  selectCanShowChampionshipChances,\r\n  (standings, canShow) => {\r\n    if (!canShow) return [];\r\n    return standings.filter(teamStat => !teamStat.isChampionshipPossible)\r\n      .map(teamStat => teamStat.team.id);\r\n  }\r\n);\r\n\r\n// Statistics selectors\r\nexport const selectTotalGoals = createSelector(\r\n  selectPlayedMatches,\r\n  (matches) => matches.reduce((total, match) => \r\n    total + (match.homeScore || 0) + (match.awayScore || 0), 0)\r\n);\r\n\r\nexport const selectAverageGoalsPerMatch = createSelector(\r\n  selectPlayedMatches,\r\n  selectTotalGoals,\r\n  (matches, totalGoals) => matches.length > 0 ? totalGoals / matches.length : 0\r\n);\r\n\r\nexport const selectLeagueProgress = createSelector(\r\n  selectCurrentWeek,\r\n  selectTotalWeeks,\r\n  (currentWeek, totalWeeks) => ({\r\n    current: currentWeek - 1,\r\n    total: totalWeeks,\r\n    percentage: ((currentWeek - 1) / totalWeeks) * 100\r\n  })\r\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}