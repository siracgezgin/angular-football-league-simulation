{"ast":null,"code":"// src/app/store/league/league.reducer.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { initialLeagueState } from '../../models/league-state.model';\nimport { LEAGUE_CONSTANTS } from '../../models/league.constants';\nimport * as LeagueActions from './league.actions';\nexport const leagueReducer = createReducer(initialLeagueState,\n// Initialize League\non(LeagueActions.initializeLeague, state => ({\n  ...state,\n  loading: true,\n  error: null\n})), on(LeagueActions.initializeLeagueSuccess, (state, {\n  teams,\n  matches\n}) => ({\n  ...state,\n  teams,\n  matches,\n  standings: calculateStandings(teams, matches),\n  weeklyMatches: groupMatchesByWeek(matches),\n  loading: false,\n  error: null,\n  currentWeek: 1,\n  isSeasonFinished: false,\n  champion: null\n})), on(LeagueActions.initializeLeagueFailure, (state, {\n  error\n}) => ({\n  ...state,\n  loading: false,\n  error\n})),\n// Play Next Week\non(LeagueActions.playNextWeek, state => ({\n  ...state,\n  loading: true\n})), on(LeagueActions.playNextWeekSuccess, (state, {\n  matches,\n  currentWeek\n}) => {\n  const updatedTeams = updateTeamsFromMatches(state.teams, matches);\n  const updatedStandings = calculateStandings(updatedTeams, matches);\n  const champion = currentWeek >= LEAGUE_CONSTANTS.TOTAL_WEEKS ? updatedStandings[0]?.team : null;\n  return {\n    ...state,\n    matches,\n    teams: updatedTeams,\n    standings: updatedStandings,\n    weeklyMatches: groupMatchesByWeek(matches),\n    currentWeek,\n    isSeasonFinished: currentWeek >= LEAGUE_CONSTANTS.TOTAL_WEEKS,\n    champion,\n    loading: false\n  };\n}),\n// Play All Season\non(LeagueActions.playAllSeason, state => ({\n  ...state,\n  loading: true\n})), on(LeagueActions.playAllSeasonSuccess, (state, {\n  allMatches,\n  finalWeek\n}) => {\n  const updatedTeams = updateTeamsFromMatches(state.teams, allMatches);\n  const updatedStandings = calculateStandings(updatedTeams, allMatches);\n  return {\n    ...state,\n    matches: allMatches,\n    teams: updatedTeams,\n    standings: updatedStandings,\n    weeklyMatches: groupMatchesByWeek(allMatches),\n    currentWeek: finalWeek,\n    isSeasonFinished: true,\n    champion: updatedStandings[0]?.team,\n    loading: false\n  };\n}),\n// Edit Match Result\non(LeagueActions.editMatchResultSuccess, (state, {\n  updatedMatch\n}) => {\n  const updatedMatches = state.matches.map(match => match.id === updatedMatch.id ? updatedMatch : match);\n  const updatedTeams = updateTeamsFromMatches(state.teams, updatedMatches);\n  const updatedStandings = calculateStandings(updatedTeams, updatedMatches);\n  return {\n    ...state,\n    matches: updatedMatches,\n    teams: updatedTeams,\n    standings: updatedStandings,\n    weeklyMatches: groupMatchesByWeek(updatedMatches)\n  };\n}),\n// Reset League\non(LeagueActions.resetLeague, () => initialLeagueState),\n// Loading\non(LeagueActions.setLoading, (state, {\n  loading\n}) => ({\n  ...state,\n  loading\n})),\n// Error handling\non(LeagueActions.setError, (state, {\n  error\n}) => ({\n  ...state,\n  error,\n  loading: false\n})), on(LeagueActions.clearError, state => ({\n  ...state,\n  error: null\n})));\n// Helper Functions\nfunction calculateStandings(teams, matches) {\n  // Reset team stats\n  const resetTeams = teams.map(team => ({\n    ...team,\n    played: 0,\n    won: 0,\n    drawn: 0,\n    lost: 0,\n    goalsFor: 0,\n    goalsAgainst: 0,\n    goalDifference: 0,\n    points: 0\n  }));\n  // Calculate stats from played matches\n  const playedMatches = matches.filter(match => match.isPlayed);\n  playedMatches.forEach(match => {\n    const homeTeam = resetTeams.find(team => team.id === match.homeTeam.id);\n    const awayTeam = resetTeams.find(team => team.id === match.awayTeam.id);\n    if (homeTeam && awayTeam && match.homeScore !== null && match.awayScore !== null) {\n      // Update goals\n      homeTeam.goalsFor += match.homeScore;\n      homeTeam.goalsAgainst += match.awayScore;\n      awayTeam.goalsFor += match.awayScore;\n      awayTeam.goalsAgainst += match.homeScore;\n      // Update played games\n      homeTeam.played++;\n      awayTeam.played++;\n      // Determine result and update points\n      if (match.homeScore > match.awayScore) {\n        // Home win\n        homeTeam.won++;\n        homeTeam.points += LEAGUE_CONSTANTS.POINTS.WIN;\n        awayTeam.lost++;\n      } else if (match.homeScore < match.awayScore) {\n        // Away win\n        awayTeam.won++;\n        awayTeam.points += LEAGUE_CONSTANTS.POINTS.WIN;\n        homeTeam.lost++;\n      } else {\n        // Draw\n        homeTeam.drawn++;\n        homeTeam.points += LEAGUE_CONSTANTS.POINTS.DRAW;\n        awayTeam.drawn++;\n        awayTeam.points += LEAGUE_CONSTANTS.POINTS.DRAW;\n      }\n      // Calculate goal difference\n      homeTeam.goalDifference = homeTeam.goalsFor - homeTeam.goalsAgainst;\n      awayTeam.goalDifference = awayTeam.goalsFor - awayTeam.goalsAgainst;\n    }\n  });\n  // Sort teams by standings rules\n  const sortedTeams = resetTeams.sort((a, b) => {\n    // 1. Points\n    if (a.points !== b.points) return b.points - a.points;\n    // 2. Goal difference\n    if (a.goalDifference !== b.goalDifference) return b.goalDifference - a.goalDifference;\n    // 3. Goals scored\n    if (a.goalsFor !== b.goalsFor) return b.goalsFor - a.goalsFor;\n    // 4. Alphabetical order\n    return a.name.localeCompare(b.name);\n  });\n  // Create TeamStats with positions\n  return sortedTeams.map((team, index) => ({\n    team,\n    position: index + 1,\n    isChampionshipPossible: isChampionshipPossible(team, sortedTeams, matches)\n  }));\n}\nfunction updateTeamsFromMatches(teams, matches) {\n  return teams.map(team => {\n    const teamMatches = matches.filter(match => (match.homeTeam.id === team.id || match.awayTeam.id === team.id) && match.isPlayed);\n    let stats = {\n      played: 0,\n      won: 0,\n      drawn: 0,\n      lost: 0,\n      goalsFor: 0,\n      goalsAgainst: 0,\n      points: 0\n    };\n    teamMatches.forEach(match => {\n      stats.played++;\n      if (match.homeTeam.id === team.id) {\n        stats.goalsFor += match.homeScore || 0;\n        stats.goalsAgainst += match.awayScore || 0;\n        if ((match.homeScore || 0) > (match.awayScore || 0)) {\n          stats.won++;\n          stats.points += LEAGUE_CONSTANTS.POINTS.WIN;\n        } else if ((match.homeScore || 0) < (match.awayScore || 0)) {\n          stats.lost++;\n        } else {\n          stats.drawn++;\n          stats.points += LEAGUE_CONSTANTS.POINTS.DRAW;\n        }\n      } else {\n        stats.goalsFor += match.awayScore || 0;\n        stats.goalsAgainst += match.homeScore || 0;\n        if ((match.awayScore || 0) > (match.homeScore || 0)) {\n          stats.won++;\n          stats.points += LEAGUE_CONSTANTS.POINTS.WIN;\n        } else if ((match.awayScore || 0) < (match.homeScore || 0)) {\n          stats.lost++;\n        } else {\n          stats.drawn++;\n          stats.points += LEAGUE_CONSTANTS.POINTS.DRAW;\n        }\n      }\n    });\n    return {\n      ...team,\n      ...stats,\n      goalDifference: stats.goalsFor - stats.goalsAgainst\n    };\n  });\n}\nfunction groupMatchesByWeek(matches) {\n  const weekGroups = matches.reduce((groups, match) => {\n    const week = match.week;\n    if (!groups[week]) {\n      groups[week] = [];\n    }\n    groups[week].push(match);\n    return groups;\n  }, {});\n  return Object.keys(weekGroups).map(week => ({\n    week: parseInt(week),\n    matches: weekGroups[parseInt(week)]\n  })).sort((a, b) => a.week - b.week);\n}\nfunction isChampionshipPossible(team, allTeams, matches) {\n  const remainingMatches = matches.filter(match => !match.isPlayed);\n  const maxPossiblePoints = team.points + remainingMatches.filter(match => match.homeTeam.id === team.id || match.awayTeam.id === team.id).length * LEAGUE_CONSTANTS.POINTS.WIN;\n  const currentLeaderPoints = allTeams[0].points;\n  return maxPossiblePoints >= currentLeaderPoints;\n}","map":{"version":3,"names":["createReducer","on","initialLeagueState","LEAGUE_CONSTANTS","LeagueActions","leagueReducer","initializeLeague","state","loading","error","initializeLeagueSuccess","teams","matches","standings","calculateStandings","weeklyMatches","groupMatchesByWeek","currentWeek","isSeasonFinished","champion","initializeLeagueFailure","playNextWeek","playNextWeekSuccess","updatedTeams","updateTeamsFromMatches","updatedStandings","TOTAL_WEEKS","team","playAllSeason","playAllSeasonSuccess","allMatches","finalWeek","editMatchResultSuccess","updatedMatch","updatedMatches","map","match","id","resetLeague","setLoading","setError","clearError","resetTeams","played","won","drawn","lost","goalsFor","goalsAgainst","goalDifference","points","playedMatches","filter","isPlayed","forEach","homeTeam","find","awayTeam","homeScore","awayScore","POINTS","WIN","DRAW","sortedTeams","sort","a","b","name","localeCompare","index","position","isChampionshipPossible","teamMatches","stats","weekGroups","reduce","groups","week","push","Object","keys","parseInt","allTeams","remainingMatches","maxPossiblePoints","length","currentLeaderPoints"],"sources":["C:\\Users\\sirac\\OneDrive\\Masaüstü\\futbol-ligi-simulasyonu\\src\\app\\store\\league\\league.reducer.ts"],"sourcesContent":["// src/app/store/league/league.reducer.ts\r\n\r\nimport { createReducer, on } from '@ngrx/store';\r\nimport { LeagueState, initialLeagueState } from '../../models/league-state.model';\r\nimport { Team, TeamStats } from '../../models/team.model';\r\nimport { Match, WeekMatches } from '../../models/match.model';\r\nimport { LEAGUE_CONSTANTS } from '../../models/league.constants';\r\nimport * as LeagueActions from './league.actions';\r\n\r\nexport const leagueReducer = createReducer(\r\n  initialLeagueState,\r\n  \r\n  // Initialize League\r\n  on(LeagueActions.initializeLeague, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(LeagueActions.initializeLeagueSuccess, (state, { teams, matches }) => ({\r\n    ...state,\r\n    teams,\r\n    matches,\r\n    standings: calculateStandings(teams, matches),\r\n    weeklyMatches: groupMatchesByWeek(matches),\r\n    loading: false,\r\n    error: null,\r\n    currentWeek: 1,\r\n    isSeasonFinished: false,\r\n    champion: null\r\n  })),\r\n  \r\n  on(LeagueActions.initializeLeagueFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  \r\n  // Play Next Week\r\n  on(LeagueActions.playNextWeek, (state) => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  \r\n  on(LeagueActions.playNextWeekSuccess, (state, { matches, currentWeek }) => {\r\n    const updatedTeams = updateTeamsFromMatches(state.teams, matches);\r\n    const updatedStandings = calculateStandings(updatedTeams, matches);\r\n    const champion = currentWeek >= LEAGUE_CONSTANTS.TOTAL_WEEKS ? \r\n      updatedStandings[0]?.team : null;\r\n    \r\n    return {\r\n      ...state,\r\n      matches,\r\n      teams: updatedTeams,\r\n      standings: updatedStandings,\r\n      weeklyMatches: groupMatchesByWeek(matches),\r\n      currentWeek,\r\n      isSeasonFinished: currentWeek >= LEAGUE_CONSTANTS.TOTAL_WEEKS,\r\n      champion,\r\n      loading: false\r\n    };\r\n  }),\r\n  \r\n  // Play All Season\r\n  on(LeagueActions.playAllSeason, (state) => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  \r\n  on(LeagueActions.playAllSeasonSuccess, (state, { allMatches, finalWeek }) => {\r\n    const updatedTeams = updateTeamsFromMatches(state.teams, allMatches);\r\n    const updatedStandings = calculateStandings(updatedTeams, allMatches);\r\n    \r\n    return {\r\n      ...state,\r\n      matches: allMatches,\r\n      teams: updatedTeams,\r\n      standings: updatedStandings,\r\n      weeklyMatches: groupMatchesByWeek(allMatches),\r\n      currentWeek: finalWeek,\r\n      isSeasonFinished: true,\r\n      champion: updatedStandings[0]?.team,\r\n      loading: false\r\n    };\r\n  }),\r\n  \r\n  // Edit Match Result\r\n  on(LeagueActions.editMatchResultSuccess, (state, { updatedMatch }) => {\r\n    const updatedMatches = state.matches.map(match => \r\n      match.id === updatedMatch.id ? updatedMatch : match\r\n    );\r\n    const updatedTeams = updateTeamsFromMatches(state.teams, updatedMatches);\r\n    const updatedStandings = calculateStandings(updatedTeams, updatedMatches);\r\n    \r\n    return {\r\n      ...state,\r\n      matches: updatedMatches,\r\n      teams: updatedTeams,\r\n      standings: updatedStandings,\r\n      weeklyMatches: groupMatchesByWeek(updatedMatches)\r\n    };\r\n  }),\r\n  \r\n  // Reset League\r\n  on(LeagueActions.resetLeague, () => initialLeagueState),\r\n  \r\n  // Loading\r\n  on(LeagueActions.setLoading, (state, { loading }) => ({\r\n    ...state,\r\n    loading\r\n  })),\r\n  \r\n  // Error handling\r\n  on(LeagueActions.setError, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    loading: false\r\n  })),\r\n  \r\n  on(LeagueActions.clearError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  }))\r\n);\r\n\r\n// Helper Functions\r\nfunction calculateStandings(teams: Team[], matches: Match[]): TeamStats[] {\r\n  // Reset team stats\r\n  const resetTeams = teams.map(team => ({\r\n    ...team,\r\n    played: 0,\r\n    won: 0,\r\n    drawn: 0,\r\n    lost: 0,\r\n    goalsFor: 0,\r\n    goalsAgainst: 0,\r\n    goalDifference: 0,\r\n    points: 0\r\n  }));\r\n\r\n  // Calculate stats from played matches\r\n  const playedMatches = matches.filter(match => match.isPlayed);\r\n  \r\n  playedMatches.forEach(match => {\r\n    const homeTeam = resetTeams.find(team => team.id === match.homeTeam.id);\r\n    const awayTeam = resetTeams.find(team => team.id === match.awayTeam.id);\r\n    \r\n    if (homeTeam && awayTeam && match.homeScore !== null && match.awayScore !== null) {\r\n      // Update goals\r\n      homeTeam.goalsFor += match.homeScore;\r\n      homeTeam.goalsAgainst += match.awayScore;\r\n      awayTeam.goalsFor += match.awayScore;\r\n      awayTeam.goalsAgainst += match.homeScore;\r\n      \r\n      // Update played games\r\n      homeTeam.played++;\r\n      awayTeam.played++;\r\n      \r\n      // Determine result and update points\r\n      if (match.homeScore > match.awayScore) {\r\n        // Home win\r\n        homeTeam.won++;\r\n        homeTeam.points += LEAGUE_CONSTANTS.POINTS.WIN;\r\n        awayTeam.lost++;\r\n      } else if (match.homeScore < match.awayScore) {\r\n        // Away win\r\n        awayTeam.won++;\r\n        awayTeam.points += LEAGUE_CONSTANTS.POINTS.WIN;\r\n        homeTeam.lost++;\r\n      } else {\r\n        // Draw\r\n        homeTeam.drawn++;\r\n        homeTeam.points += LEAGUE_CONSTANTS.POINTS.DRAW;\r\n        awayTeam.drawn++;\r\n        awayTeam.points += LEAGUE_CONSTANTS.POINTS.DRAW;\r\n      }\r\n      \r\n      // Calculate goal difference\r\n      homeTeam.goalDifference = homeTeam.goalsFor - homeTeam.goalsAgainst;\r\n      awayTeam.goalDifference = awayTeam.goalsFor - awayTeam.goalsAgainst;\r\n    }\r\n  });\r\n\r\n  // Sort teams by standings rules\r\n  const sortedTeams = resetTeams.sort((a, b) => {\r\n    // 1. Points\r\n    if (a.points !== b.points) return b.points - a.points;\r\n    \r\n    // 2. Goal difference\r\n    if (a.goalDifference !== b.goalDifference) return b.goalDifference - a.goalDifference;\r\n    \r\n    // 3. Goals scored\r\n    if (a.goalsFor !== b.goalsFor) return b.goalsFor - a.goalsFor;\r\n    \r\n    // 4. Alphabetical order\r\n    return a.name.localeCompare(b.name);\r\n  });\r\n\r\n  // Create TeamStats with positions\r\n  return sortedTeams.map((team, index) => ({\r\n    team,\r\n    position: index + 1,\r\n    isChampionshipPossible: isChampionshipPossible(team, sortedTeams, matches)\r\n  }));\r\n}\r\n\r\nfunction updateTeamsFromMatches(teams: Team[], matches: Match[]): Team[] {\r\n  return teams.map(team => {\r\n    const teamMatches = matches.filter(match => \r\n      (match.homeTeam.id === team.id || match.awayTeam.id === team.id) && match.isPlayed\r\n    );\r\n    \r\n    let stats = {\r\n      played: 0,\r\n      won: 0,\r\n      drawn: 0,\r\n      lost: 0,\r\n      goalsFor: 0,\r\n      goalsAgainst: 0,\r\n      points: 0\r\n    };\r\n    \r\n    teamMatches.forEach(match => {\r\n      stats.played++;\r\n      \r\n      if (match.homeTeam.id === team.id) {\r\n        stats.goalsFor += match.homeScore || 0;\r\n        stats.goalsAgainst += match.awayScore || 0;\r\n        \r\n        if ((match.homeScore || 0) > (match.awayScore || 0)) {\r\n          stats.won++;\r\n          stats.points += LEAGUE_CONSTANTS.POINTS.WIN;\r\n        } else if ((match.homeScore || 0) < (match.awayScore || 0)) {\r\n          stats.lost++;\r\n        } else {\r\n          stats.drawn++;\r\n          stats.points += LEAGUE_CONSTANTS.POINTS.DRAW;\r\n        }\r\n      } else {\r\n        stats.goalsFor += match.awayScore || 0;\r\n        stats.goalsAgainst += match.homeScore || 0;\r\n        \r\n        if ((match.awayScore || 0) > (match.homeScore || 0)) {\r\n          stats.won++;\r\n          stats.points += LEAGUE_CONSTANTS.POINTS.WIN;\r\n        } else if ((match.awayScore || 0) < (match.homeScore || 0)) {\r\n          stats.lost++;\r\n        } else {\r\n          stats.drawn++;\r\n          stats.points += LEAGUE_CONSTANTS.POINTS.DRAW;\r\n        }\r\n      }\r\n    });\r\n    \r\n    return {\r\n      ...team,\r\n      ...stats,\r\n      goalDifference: stats.goalsFor - stats.goalsAgainst\r\n    };\r\n  });\r\n}\r\n\r\nfunction groupMatchesByWeek(matches: Match[]): WeekMatches[] {\r\n  const weekGroups = matches.reduce((groups, match) => {\r\n    const week = match.week;\r\n    if (!groups[week]) {\r\n      groups[week] = [];\r\n    }\r\n    groups[week].push(match);\r\n    return groups;\r\n  }, {} as { [week: number]: Match[] });\r\n\r\n  return Object.keys(weekGroups).map(week => ({\r\n    week: parseInt(week),\r\n    matches: weekGroups[parseInt(week)]\r\n  })).sort((a, b) => a.week - b.week);\r\n}\r\n\r\nfunction isChampionshipPossible(team: Team, allTeams: Team[], matches: Match[]): boolean {\r\n  const remainingMatches = matches.filter(match => !match.isPlayed);\r\n  const maxPossiblePoints = team.points + (remainingMatches.filter(match => \r\n    match.homeTeam.id === team.id || match.awayTeam.id === team.id\r\n  ).length * LEAGUE_CONSTANTS.POINTS.WIN);\r\n  \r\n  const currentLeaderPoints = allTeams[0].points;\r\n  \r\n  return maxPossiblePoints >= currentLeaderPoints;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}