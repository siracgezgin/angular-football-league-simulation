{"ast":null,"code":"import { of, delay } from 'rxjs';\nimport { MatchResult } from '../../models/match.model';\nimport { LEAGUE_CONSTANTS } from '../../models/league.constants';\nimport * as i0 from \"@angular/core\";\nexport class LeagueSimulationService {\n  constructor() {}\n  /**\n   * Liga başlangıçında takımları oluşturur\n   */\n  initializeTeams() {\n    const teams = LEAGUE_CONSTANTS.TEAM_NAMES.map((name, index) => ({\n      id: index + 1,\n      name,\n      played: 0,\n      won: 0,\n      drawn: 0,\n      lost: 0,\n      goalsFor: 0,\n      goalsAgainst: 0,\n      goalDifference: 0,\n      points: 0,\n      strength: this.getRandomTeamStrength()\n    }));\n    return of(teams).pipe(delay(500)); // Simülasyon gecikmesi\n  }\n  /**\n   * Fikstürü oluşturur (tüm takımların birbirleriyle oynayacağı maçlar)\n   */\n  generateFixture(teams) {\n    const matches = [];\n    let matchId = 1;\n    let week = 1;\n    // Her takımın diğer takımlarla birer maç oynayacağı fikstür\n    for (let i = 0; i < teams.length; i++) {\n      for (let j = i + 1; j < teams.length; j++) {\n        // İlk maç (takım i evde)\n        matches.push({\n          id: matchId++,\n          week,\n          homeTeam: {\n            id: teams[i].id,\n            name: teams[i].name\n          },\n          awayTeam: {\n            id: teams[j].id,\n            name: teams[j].name\n          },\n          homeScore: null,\n          awayScore: null,\n          isPlayed: false\n        });\n        week++;\n        if (week > LEAGUE_CONSTANTS.TOTAL_WEEKS / 2) {\n          week = 1;\n        }\n      }\n    }\n    // İkinci devre maçları (ters fikstür)\n    const firstHalfMatches = [...matches];\n    firstHalfMatches.forEach(match => {\n      matches.push({\n        id: matchId++,\n        week: match.week + 3,\n        homeTeam: match.awayTeam,\n        awayTeam: match.homeTeam,\n        homeScore: null,\n        awayScore: null,\n        isPlayed: false\n      });\n    });\n    return of(matches).pipe(delay(300));\n  }\n  /**\n   * Bir haftalık maçları oynatır\n   */\n  playWeekMatches(matches, week) {\n    const weekMatches = matches.filter(match => match.week === week && !match.isPlayed);\n    const updatedMatches = matches.map(match => {\n      if (match.week === week && !match.isPlayed) {\n        const result = this.simulateMatch(match.homeTeam.id, match.awayTeam.id, this.getTeamStrengthById(matches, match.homeTeam.id), this.getTeamStrengthById(matches, match.awayTeam.id));\n        return {\n          ...match,\n          homeScore: result.homeScore,\n          awayScore: result.awayScore,\n          isPlayed: true,\n          result: result.result\n        };\n      }\n      return match;\n    });\n    return of(updatedMatches).pipe(delay(800));\n  }\n  /**\n   * Tüm sezonun geri kalanını oynatır\n   */\n  playAllRemainingSeason(matches, currentWeek) {\n    let updatedMatches = [...matches];\n    for (let week = currentWeek; week <= LEAGUE_CONSTANTS.TOTAL_WEEKS; week++) {\n      updatedMatches = updatedMatches.map(match => {\n        if (match.week === week && !match.isPlayed) {\n          const result = this.simulateMatch(match.homeTeam.id, match.awayTeam.id, this.getTeamStrengthById(updatedMatches, match.homeTeam.id), this.getTeamStrengthById(updatedMatches, match.awayTeam.id));\n          return {\n            ...match,\n            homeScore: result.homeScore,\n            awayScore: result.awayScore,\n            isPlayed: true,\n            result: result.result\n          };\n        }\n        return match;\n      });\n    }\n    return of(updatedMatches).pipe(delay(1200));\n  }\n  /**\n   * Maç sonucunu düzenler\n   */\n  editMatchResult(matches, matchId, homeScore, awayScore) {\n    const matchToEdit = matches.find(match => match.id === matchId);\n    if (!matchToEdit) {\n      throw new Error('Maç bulunamadı');\n    }\n    const result = this.determineResult(homeScore, awayScore);\n    const updatedMatch = {\n      ...matchToEdit,\n      homeScore,\n      awayScore,\n      isPlayed: true,\n      result\n    };\n    return of(updatedMatch).pipe(delay(200));\n  }\n  /**\n   * Tek maç simülasyonu\n   */\n  simulateMatch(homeTeamId, awayTeamId, homeStrength, awayStrength) {\n    // Ev sahibi avantajı\n    const homeAdvantage = 0.3;\n    const adjustedHomeStrength = homeStrength + homeAdvantage;\n    // Gol sayılarını belirle (takım gücüne göre)\n    const homeScore = this.generateGoalCount(adjustedHomeStrength);\n    const awayScore = this.generateGoalCount(awayStrength);\n    const result = this.determineResult(homeScore, awayScore);\n    return {\n      homeScore,\n      awayScore,\n      result\n    };\n  }\n  /**\n   * Takım gücüne göre gol sayısı üretir\n   */\n  generateGoalCount(strength) {\n    // Strength 1-5 arası, gol ihtimalini etkiler\n    const baseChance = strength / 5; // 0.2 - 1.0 arası\n    const random = Math.random();\n    if (random < 0.1) return 0; // %10 şansla 0 gol\n    if (random < 0.3 + baseChance * 0.2) return 1; // Güce göre değişen şansla 1 gol\n    if (random < 0.7 + baseChance * 0.15) return 2; // 2 gol\n    if (random < 0.9 + baseChance * 0.1) return 3; // 3 gol\n    if (random < 0.98) return 4; // Nadir 4 gol\n    return 5; // Çok nadir 5 gol\n  }\n  /**\n   * Maç sonucunu belirler\n   */\n  determineResult(homeScore, awayScore) {\n    if (homeScore > awayScore) return MatchResult.HOME_WIN;\n    if (homeScore < awayScore) return MatchResult.AWAY_WIN;\n    return MatchResult.DRAW;\n  }\n  /**\n   * Rastgele takım gücü üretir\n   */\n  getRandomTeamStrength() {\n    return Math.floor(Math.random() * (LEAGUE_CONSTANTS.TEAM_STRENGTH.MAX - LEAGUE_CONSTANTS.TEAM_STRENGTH.MIN + 1)) + LEAGUE_CONSTANTS.TEAM_STRENGTH.MIN;\n  }\n  /**\n   * Takım ID'sine göre takım gücünü bulur\n   */\n  getTeamStrengthById(matches, teamId) {\n    // Bu örnekte sabit güçler kullanıyoruz, gerçek uygulamada store'dan alınabilir\n    const strengthMap = {\n      1: 4,\n      2: 4,\n      3: 3,\n      4: 3 // Trabzonspor\n    };\n\n    return strengthMap[teamId] || LEAGUE_CONSTANTS.TEAM_STRENGTH.DEFAULT;\n  }\n  /**\n   * Şampiyonluk ihtimallerini hesaplar (Monte Carlo simülasyonu)\n   */\n  calculateChampionshipChances(teams, remainingMatches) {\n    const simulations = 1000;\n    const wins = {};\n    // Başlangıç değerleri\n    teams.forEach(team => {\n      wins[team.id] = 0;\n    });\n    // Monte Carlo simülasyonu\n    for (let i = 0; i < simulations; i++) {\n      const simulatedResults = this.simulateRemainingMatches(teams, remainingMatches);\n      const finalStandings = this.calculateFinalStandings(teams, simulatedResults);\n      const champion = finalStandings[0];\n      wins[champion.id]++;\n    }\n    // Yüzdelik hesaplama\n    const chances = {};\n    teams.forEach(team => {\n      chances[team.id] = wins[team.id] / simulations * 100;\n    });\n    return of(chances).pipe(delay(500));\n  }\n  /**\n   * Kalan maçları simüle eder\n   */\n  simulateRemainingMatches(teams, remainingMatches) {\n    return remainingMatches.map(match => {\n      const homeTeam = teams.find(t => t.id === match.homeTeam.id);\n      const awayTeam = teams.find(t => t.id === match.awayTeam.id);\n      const result = this.simulateMatch(match.homeTeam.id, match.awayTeam.id, homeTeam?.strength || 3, awayTeam?.strength || 3);\n      return {\n        ...match,\n        homeScore: result.homeScore,\n        awayScore: result.awayScore,\n        isPlayed: true,\n        result: result.result\n      };\n    });\n  }\n  /**\n   * Final sıralamayı hesaplar\n   */\n  calculateFinalStandings(teams, simulatedMatches) {\n    // Bu fonksiyon reducer'daki calculateStandings fonksiyonuna benzer\n    // Basitleştirilmiş hali\n    const teamsWithPoints = teams.map(team => {\n      let points = team.points;\n      let goalDiff = team.goalDifference;\n      simulatedMatches.forEach(match => {\n        if (match.homeTeam.id === team.id) {\n          if (match.result === MatchResult.HOME_WIN) {\n            points += LEAGUE_CONSTANTS.POINTS.WIN;\n          } else if (match.result === MatchResult.DRAW) {\n            points += LEAGUE_CONSTANTS.POINTS.DRAW;\n          }\n        } else if (match.awayTeam.id === team.id) {\n          if (match.result === MatchResult.AWAY_WIN) {\n            points += LEAGUE_CONSTANTS.POINTS.WIN;\n          } else if (match.result === MatchResult.DRAW) {\n            points += LEAGUE_CONSTANTS.POINTS.DRAW;\n          }\n        }\n      });\n      return {\n        ...team,\n        points,\n        goalDifference: goalDiff\n      };\n    });\n    return teamsWithPoints.sort((a, b) => {\n      if (a.points !== b.points) return b.points - a.points;\n      if (a.goalDifference !== b.goalDifference) return b.goalDifference - a.goalDifference;\n      return a.name.localeCompare(b.name);\n    });\n  }\n  static {\n    this.ɵfac = function LeagueSimulationService_Factory(t) {\n      return new (t || LeagueSimulationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LeagueSimulationService,\n      factory: LeagueSimulationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","delay","MatchResult","LEAGUE_CONSTANTS","LeagueSimulationService","constructor","initializeTeams","teams","TEAM_NAMES","map","name","index","id","played","won","drawn","lost","goalsFor","goalsAgainst","goalDifference","points","strength","getRandomTeamStrength","pipe","generateFixture","matches","matchId","week","i","length","j","push","homeTeam","awayTeam","homeScore","awayScore","isPlayed","TOTAL_WEEKS","firstHalfMatches","forEach","match","playWeekMatches","weekMatches","filter","updatedMatches","result","simulateMatch","getTeamStrengthById","playAllRemainingSeason","currentWeek","editMatchResult","matchToEdit","find","Error","determineResult","updatedMatch","homeTeamId","awayTeamId","homeStrength","awayStrength","homeAdvantage","adjustedHomeStrength","generateGoalCount","baseChance","random","Math","HOME_WIN","AWAY_WIN","DRAW","floor","TEAM_STRENGTH","MAX","MIN","teamId","strengthMap","DEFAULT","calculateChampionshipChances","remainingMatches","simulations","wins","team","simulatedResults","simulateRemainingMatches","finalStandings","calculateFinalStandings","champion","chances","t","simulatedMatches","teamsWithPoints","goalDiff","POINTS","WIN","sort","a","b","localeCompare","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sirac\\OneDrive\\Masaüstü\\futbol-ligi-simulasyonu\\src\\app\\league\\services\\league-simulation.service.ts"],"sourcesContent":["// src/app/league/services/league-simulation.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { Observable, of, delay } from 'rxjs';\nimport { Team } from '../../models/team.model';\nimport { Match, MatchResult } from '../../models/match.model';\nimport { LEAGUE_CONSTANTS } from '../../models/league.constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LeagueSimulationService {\n\n  constructor() { }\n\n  /**\n   * Liga başlangıçında takımları oluşturur\n   */\n  initializeTeams(): Observable<Team[]> {\n    const teams: Team[] = LEAGUE_CONSTANTS.TEAM_NAMES.map((name, index) => ({\n      id: index + 1,\n      name,\n      played: 0,\n      won: 0,\n      drawn: 0,\n      lost: 0,\n      goalsFor: 0,\n      goalsAgainst: 0,\n      goalDifference: 0,\n      points: 0,\n      strength: this.getRandomTeamStrength()\n    }));\n\n    return of(teams).pipe(delay(500)); // Simülasyon gecikmesi\n  }\n\n  /**\n   * Fikstürü oluşturur (tüm takımların birbirleriyle oynayacağı maçlar)\n   */\n  generateFixture(teams: Team[]): Observable<Match[]> {\n    const matches: Match[] = [];\n    let matchId = 1;\n    let week = 1;\n\n    // Her takımın diğer takımlarla birer maç oynayacağı fikstür\n    for (let i = 0; i < teams.length; i++) {\n      for (let j = i + 1; j < teams.length; j++) {\n        // İlk maç (takım i evde)\n        matches.push({\n          id: matchId++,\n          week,\n          homeTeam: {\n            id: teams[i].id,\n            name: teams[i].name\n          },\n          awayTeam: {\n            id: teams[j].id,\n            name: teams[j].name\n          },\n          homeScore: null,\n          awayScore: null,\n          isPlayed: false\n        });\n        \n        week++;\n        if (week > LEAGUE_CONSTANTS.TOTAL_WEEKS / 2) {\n          week = 1;\n        }\n      }\n    }\n\n    // İkinci devre maçları (ters fikstür)\n    const firstHalfMatches = [...matches];\n    firstHalfMatches.forEach(match => {\n      matches.push({\n        id: matchId++,\n        week: match.week + 3, // İkinci yarı\n        homeTeam: match.awayTeam, // Ev sahibi-deplasman yer değiştir\n        awayTeam: match.homeTeam,\n        homeScore: null,\n        awayScore: null,\n        isPlayed: false\n      });\n    });\n\n    return of(matches).pipe(delay(300));\n  }\n\n  /**\n   * Bir haftalık maçları oynatır\n   */\n  playWeekMatches(matches: Match[], week: number): Observable<Match[]> {\n    const weekMatches = matches.filter(match => match.week === week && !match.isPlayed);\n    \n    const updatedMatches = matches.map(match => {\n      if (match.week === week && !match.isPlayed) {\n        const result = this.simulateMatch(\n          match.homeTeam.id, \n          match.awayTeam.id,\n          this.getTeamStrengthById(matches, match.homeTeam.id),\n          this.getTeamStrengthById(matches, match.awayTeam.id)\n        );\n        \n        return {\n          ...match,\n          homeScore: result.homeScore,\n          awayScore: result.awayScore,\n          isPlayed: true,\n          result: result.result\n        };\n      }\n      return match;\n    });\n\n    return of(updatedMatches).pipe(delay(800));\n  }\n\n  /**\n   * Tüm sezonun geri kalanını oynatır\n   */\n  playAllRemainingSeason(matches: Match[], currentWeek: number): Observable<Match[]> {\n    let updatedMatches = [...matches];\n\n    for (let week = currentWeek; week <= LEAGUE_CONSTANTS.TOTAL_WEEKS; week++) {\n      updatedMatches = updatedMatches.map(match => {\n        if (match.week === week && !match.isPlayed) {\n          const result = this.simulateMatch(\n            match.homeTeam.id,\n            match.awayTeam.id,\n            this.getTeamStrengthById(updatedMatches, match.homeTeam.id),\n            this.getTeamStrengthById(updatedMatches, match.awayTeam.id)\n          );\n\n          return {\n            ...match,\n            homeScore: result.homeScore,\n            awayScore: result.awayScore,\n            isPlayed: true,\n            result: result.result\n          };\n        }\n        return match;\n      });\n    }\n\n    return of(updatedMatches).pipe(delay(1200));\n  }\n\n  /**\n   * Maç sonucunu düzenler\n   */\n  editMatchResult(matches: Match[], matchId: number, homeScore: number, awayScore: number): Observable<Match> {\n    const matchToEdit = matches.find(match => match.id === matchId);\n    \n    if (!matchToEdit) {\n      throw new Error('Maç bulunamadı');\n    }\n\n    const result = this.determineResult(homeScore, awayScore);\n    \n    const updatedMatch: Match = {\n      ...matchToEdit,\n      homeScore,\n      awayScore,\n      isPlayed: true,\n      result\n    };\n\n    return of(updatedMatch).pipe(delay(200));\n  }\n\n  /**\n   * Tek maç simülasyonu\n   */\n  private simulateMatch(homeTeamId: number, awayTeamId: number, homeStrength: number, awayStrength: number): {\n    homeScore: number;\n    awayScore: number;\n    result: MatchResult;\n  } {\n    // Ev sahibi avantajı\n    const homeAdvantage = 0.3;\n    const adjustedHomeStrength = homeStrength + homeAdvantage;\n    \n    // Gol sayılarını belirle (takım gücüne göre)\n    const homeScore = this.generateGoalCount(adjustedHomeStrength);\n    const awayScore = this.generateGoalCount(awayStrength);\n    \n    const result = this.determineResult(homeScore, awayScore);\n\n    return {\n      homeScore,\n      awayScore,\n      result\n    };\n  }\n\n  /**\n   * Takım gücüne göre gol sayısı üretir\n   */\n  private generateGoalCount(strength: number): number {\n    // Strength 1-5 arası, gol ihtimalini etkiler\n    const baseChance = strength / 5; // 0.2 - 1.0 arası\n    const random = Math.random();\n    \n    if (random < 0.1) return 0; // %10 şansla 0 gol\n    if (random < 0.3 + (baseChance * 0.2)) return 1; // Güce göre değişen şansla 1 gol\n    if (random < 0.7 + (baseChance * 0.15)) return 2; // 2 gol\n    if (random < 0.9 + (baseChance * 0.1)) return 3;  // 3 gol\n    if (random < 0.98) return 4; // Nadir 4 gol\n    return 5; // Çok nadir 5 gol\n  }\n\n  /**\n   * Maç sonucunu belirler\n   */\n  private determineResult(homeScore: number, awayScore: number): MatchResult {\n    if (homeScore > awayScore) return MatchResult.HOME_WIN;\n    if (homeScore < awayScore) return MatchResult.AWAY_WIN;\n    return MatchResult.DRAW;\n  }\n\n  /**\n   * Rastgele takım gücü üretir\n   */\n  private getRandomTeamStrength(): number {\n    return Math.floor(Math.random() * \n      (LEAGUE_CONSTANTS.TEAM_STRENGTH.MAX - LEAGUE_CONSTANTS.TEAM_STRENGTH.MIN + 1)) + \n      LEAGUE_CONSTANTS.TEAM_STRENGTH.MIN;\n  }\n\n  /**\n   * Takım ID'sine göre takım gücünü bulur\n   */\n  private getTeamStrengthById(matches: Match[], teamId: number): number {\n    // Bu örnekte sabit güçler kullanıyoruz, gerçek uygulamada store'dan alınabilir\n    const strengthMap: { [key: number]: number } = {\n      1: 4, // Galatasaray\n      2: 4, // Fenerbahçe\n      3: 3, // Beşiktaş\n      4: 3  // Trabzonspor\n    };\n    \n    return strengthMap[teamId] || LEAGUE_CONSTANTS.TEAM_STRENGTH.DEFAULT;\n  }\n\n  /**\n   * Şampiyonluk ihtimallerini hesaplar (Monte Carlo simülasyonu)\n   */\n  calculateChampionshipChances(teams: Team[], remainingMatches: Match[]): Observable<{ [teamId: number]: number }> {\n    const simulations = 1000;\n    const wins: { [teamId: number]: number } = {};\n    \n    // Başlangıç değerleri\n    teams.forEach(team => {\n      wins[team.id] = 0;\n    });\n\n    // Monte Carlo simülasyonu\n    for (let i = 0; i < simulations; i++) {\n      const simulatedResults = this.simulateRemainingMatches(teams, remainingMatches);\n      const finalStandings = this.calculateFinalStandings(teams, simulatedResults);\n      const champion = finalStandings[0];\n      wins[champion.id]++;\n    }\n\n    // Yüzdelik hesaplama\n    const chances: { [teamId: number]: number } = {};\n    teams.forEach(team => {\n      chances[team.id] = (wins[team.id] / simulations) * 100;\n    });\n\n    return of(chances).pipe(delay(500));\n  }\n\n  /**\n   * Kalan maçları simüle eder\n   */\n  private simulateRemainingMatches(teams: Team[], remainingMatches: Match[]): Match[] {\n    return remainingMatches.map(match => {\n      const homeTeam = teams.find(t => t.id === match.homeTeam.id);\n      const awayTeam = teams.find(t => t.id === match.awayTeam.id);\n      \n      const result = this.simulateMatch(\n        match.homeTeam.id,\n        match.awayTeam.id,\n        homeTeam?.strength || 3,\n        awayTeam?.strength || 3\n      );\n\n      return {\n        ...match,\n        homeScore: result.homeScore,\n        awayScore: result.awayScore,\n        isPlayed: true,\n        result: result.result\n      };\n    });\n  }\n\n  /**\n   * Final sıralamayı hesaplar\n   */\n  private calculateFinalStandings(teams: Team[], simulatedMatches: Match[]): Team[] {\n    // Bu fonksiyon reducer'daki calculateStandings fonksiyonuna benzer\n    // Basitleştirilmiş hali\n    const teamsWithPoints = teams.map(team => {\n      let points = team.points;\n      let goalDiff = team.goalDifference;\n\n      simulatedMatches.forEach(match => {\n        if (match.homeTeam.id === team.id) {\n          if (match.result === MatchResult.HOME_WIN) {\n            points += LEAGUE_CONSTANTS.POINTS.WIN;\n          } else if (match.result === MatchResult.DRAW) {\n            points += LEAGUE_CONSTANTS.POINTS.DRAW;\n          }\n        } else if (match.awayTeam.id === team.id) {\n          if (match.result === MatchResult.AWAY_WIN) {\n            points += LEAGUE_CONSTANTS.POINTS.WIN;\n          } else if (match.result === MatchResult.DRAW) {\n            points += LEAGUE_CONSTANTS.POINTS.DRAW;\n          }\n        }\n      });\n\n      return { ...team, points, goalDifference: goalDiff };\n    });\n\n    return teamsWithPoints.sort((a, b) => {\n      if (a.points !== b.points) return b.points - a.points;\n      if (a.goalDifference !== b.goalDifference) return b.goalDifference - a.goalDifference;\n      return a.name.localeCompare(b.name);\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}